import http from 'http';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import nodemailer from 'nodemailer';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || 'localhost';

// MIME types –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const MIME_TYPES = {
    '.html': 'text/html; charset=utf-8',
    '.js': 'text/javascript; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.webp': 'image/webp',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject'
};

// Rate limiting (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
const rateLimitMap = new Map();
const RATE_LIMIT_WINDOW = 60000; // 1 –º–∏–Ω—É—Ç–∞
const RATE_LIMIT_MAX_REQUESTS = 60;
const CONTACT_LIMIT_MAX_REQUESTS = 5;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit
function checkRateLimit(ip, isContactForm = false) {
    const now = Date.now();
    const maxRequests = isContactForm ? CONTACT_LIMIT_MAX_REQUESTS : RATE_LIMIT_MAX_REQUESTS;

    if (!rateLimitMap.has(ip)) {
        rateLimitMap.set(ip, []);
    }

    const requests = rateLimitMap.get(ip);
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const validRequests = requests.filter(time => now - time < RATE_LIMIT_WINDOW);

    if (validRequests.length >= maxRequests) {
        return false;
    }

    validRequests.push(now);
    rateLimitMap.set(ip, validRequests);
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
function parseBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                resolve(body ? JSON.parse(body) : {});
            } catch (e) {
                resolve({});
            }
        });
        req.on('error', reject);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞
function sendJSON(res, statusCode, data) {
    res.writeHead(statusCode, {
        'Content-Type': 'application/json; charset=utf-8',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
    });
    res.end(JSON.stringify(data, null, 2));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
function sendFile(res, filePath) {
    fs.readFile(filePath, (err, content) => {
        if (err) {
            if (err.code === 'ENOENT') {
                sendJSON(res, 404, {
                    success: false,
                    message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            } else {
                sendJSON(res, 500, {
                    success: false,
                    message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
                });
            }
            return;
        }

        const ext = path.extname(filePath).toLowerCase();
        const contentType = MIME_TYPES[ext] || 'application/octet-stream';

        res.writeHead(200, {
            'Content-Type': contentType,
            'Content-Length': content.length,
            'Cache-Control': 'public, max-age=3600'
        });
        res.end(content);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email (nodemailer)
function createEmailTransporter() {
    // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
    return nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: process.env.SMTP_PORT || 587,
        secure: false,
        auth: {
            user: process.env.SMTP_USER || 'your-email@gmail.com',
            pass: process.env.SMTP_PASS || 'your-password'
        }
    });
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const apiHandlers = {
    // Health check
    'GET /api/health': (req, res) => {
        sendJSON(res, 200, {
            success: true,
            status: 'OK',
            timestamp: new Date().toISOString(),
            uptime: process.uptime()
        });
    },

    // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    'POST /api/calculator/calculate': async (req, res) => {
        try {
            const body = await parseBody(req);
            const { projectType, pages, design, features } = body;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (!projectType || !pages || !design) {
                sendJSON(res, 400, {
                    success: false,
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞'
                });
                return;
            }

            // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            let total = projectType.price + pages.price + design.price;

            if (features && Array.isArray(features)) {
                features.forEach(feature => {
                    total += feature.price || 0;
                });
            }

            sendJSON(res, 200, {
                success: true,
                data: {
                    total,
                    projectType,
                    pages,
                    design,
                    features: features || []
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ:', error);
            sendJSON(res, 500, {
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏'
            });
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
    'POST /api/contact': async (req, res) => {
        const clientIp = req.socket.remoteAddress;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if (!checkRateLimit(clientIp, true)) {
            sendJSON(res, 429, {
                success: false,
                message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
            });
            return;
        }

        try {
            const body = await parseBody(req);
            const { name, email, phone, message } = body;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!name || !email || !message) {
                sendJSON(res, 400, {
                    success: false,
                    message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
                });
                return;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                sendJSON(res, 400, {
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
                });
                return;
            }

            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            console.log('\nüìß –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:');
            console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
            console.log('–ò–º—è:', name);
            console.log('Email:', email);
            console.log('–¢–µ–ª–µ—Ñ–æ–Ω:', phone || '–Ω–µ —É–∫–∞–∑–∞–Ω');
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', message);
            console.log('–î–∞—Ç–∞:', new Date().toLocaleString('ru-RU'));
            console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n');

            // –û—Ç–ø—Ä–∞–≤–∫–∞ email (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
            /*
            const transporter = createEmailTransporter();
            await transporter.sendMail({
                from: process.env.SMTP_USER,
                to: process.env.CONTACT_EMAIL || 'info@devinfra.ru',
                subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${name}`,
                html: `
                    <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
                    <p><strong>–ò–º—è:</strong> ${name}</p>
                    <p><strong>Email:</strong> ${email}</p>
                    <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
                    <p>${message.replace(/\n/g, '<br>')}</p>
                    <hr>
                    <p><small>–ü–æ–ª—É—á–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</small></p>
                `
            });
            */

            sendJSON(res, 200, {
                success: true,
                message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
            sendJSON(res, 500, {
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            });
        }
    }
};

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
const server = http.createServer(async (req, res) => {
    const clientIp = req.socket.remoteAddress;
    const url = new URL(req.url, `http://${req.headers.host}`);
    const pathname = url.pathname;
    const method = req.method;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log(`[${new Date().toLocaleTimeString('ru-RU')}] ${method} ${pathname} - ${clientIp}`);

    // CORS –¥–ª—è OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
    if (method === 'OPTIONS') {
        res.writeHead(204, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        });
        res.end();
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    if (pathname.startsWith('/api/') && pathname !== '/api/health') {
        if (!checkRateLimit(clientIp)) {
            sendJSON(res, 429, {
                success: false,
                message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
            });
            return;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
    const apiKey = `${method} ${pathname}`;
    if (apiHandlers[apiKey]) {
        await apiHandlers[apiKey](req, res);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    let filePath;
    if (pathname === '/') {
        filePath = path.join(__dirname, 'index.html');
    } else {
        filePath = path.join(__dirname, pathname);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ directory traversal)
    const resolvedPath = path.resolve(filePath);
    if (!resolvedPath.startsWith(__dirname)) {
        sendJSON(res, 403, {
            success: false,
            message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
        });
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    fs.access(filePath, fs.constants.F_OK, (err) => {
        if (err) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ –Ω–µ API –∑–∞–ø—Ä–æ—Å, –æ—Ç–¥–∞–µ–º index.html (–¥–ª—è SPA)
            if (!pathname.startsWith('/api/')) {
                sendFile(res, path.join(__dirname, 'index.html'));
            } else {
                sendJSON(res, 404, {
                    success: false,
                    message: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
        } else {
            sendFile(res, filePath);
        }
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, HOST, () => {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                       ‚ïë
‚ïë   üöÄ DevInfra Server –∑–∞–ø—É—â–µ–Ω!                        ‚ïë
‚ïë                                                       ‚ïë
‚ïë   üì° –ü–æ—Ä—Ç: ${PORT.toString().padEnd(44)             } ‚ïë
‚ïë   üåç URL: http://${HOST}:${PORT}${' '.repeat(44 - HOST.length - PORT.toStri‚ïë
‚ïë   ‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU').padE‚ïë
‚ïë                                                       ‚ïë
‚ïë   üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:                         ‚ïë
‚ïë      GET  /api/health                                 ‚ïë
‚ïë      POST /api/contact                                ‚ïë
‚ïë      POST /api/calculator/calculate                   ‚ïë
‚ïë                                                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('\nSIGTERM –ø–æ–ª—É—á–µ–Ω: –∑–∞–∫—Ä—ã–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä');
    server.close(() => {
        console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('\nSIGINT –ø–æ–ª—É—á–µ–Ω: –∑–∞–∫—Ä—ã–≤–∞—é HTTP —Å–µ—Ä–≤–µ—Ä');
    server.close(() => {
        console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
    console.error('Uncaught Exception:', err);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

export default server;
